<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>alloc::vec::Vec&lt;T&gt;::is_empty (51 samples, 0.11%)</title><rect x="1.0812%" y="469" width="0.1114%" height="15" fill="rgb(227,0,7)"/><text x="1.3312%" y="479.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (61 samples, 0.13%)</title><rect x="1.7408%" y="469" width="0.1332%" height="15" fill="rgb(217,0,24)"/><text x="1.9908%" y="479.50"></text></g><g><title>[[heap]] (1,057 samples, 2.31%)</title><rect x="0.0524%" y="485" width="2.3087%" height="15" fill="rgb(221,193,54)"/><text x="0.3024%" y="495.50">[..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (61 samples, 0.13%)</title><rect x="2.4856%" y="469" width="0.1332%" height="15" fill="rgb(248,212,6)"/><text x="2.7356%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (52 samples, 0.11%)</title><rect x="2.6189%" y="469" width="0.1136%" height="15" fill="rgb(208,68,35)"/><text x="2.8689%" y="479.50"></text></g><g><title>alloc::collections::btree::map::Range&lt;K,V&gt;::next_unchecked (47 samples, 0.10%)</title><rect x="2.9509%" y="469" width="0.1027%" height="15" fill="rgb(232,128,0)"/><text x="3.2009%" y="479.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (58 samples, 0.13%)</title><rect x="3.4292%" y="469" width="0.1267%" height="15" fill="rgb(207,160,47)"/><text x="3.6792%" y="479.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (203 samples, 0.44%)</title><rect x="4.3706%" y="469" width="0.4434%" height="15" fill="rgb(228,23,34)"/><text x="4.6206%" y="479.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (134 samples, 0.29%)</title><rect x="4.9363%" y="469" width="0.2927%" height="15" fill="rgb(218,30,26)"/><text x="5.1863%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::is_empty (58 samples, 0.13%)</title><rect x="5.4715%" y="469" width="0.1267%" height="15" fill="rgb(220,122,19)"/><text x="5.7215%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (79 samples, 0.17%)</title><rect x="5.7467%" y="469" width="0.1726%" height="15" fill="rgb(250,228,42)"/><text x="5.9967%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (52 samples, 0.11%)</title><rect x="6.0568%" y="469" width="0.1136%" height="15" fill="rgb(240,193,28)"/><text x="6.3068%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (57 samples, 0.12%)</title><rect x="6.2665%" y="469" width="0.1245%" height="15" fill="rgb(216,20,37)"/><text x="6.5165%" y="479.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (178 samples, 0.39%)</title><rect x="6.4806%" y="469" width="0.3888%" height="15" fill="rgb(206,188,39)"/><text x="6.7306%" y="479.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (190 samples, 0.42%)</title><rect x="6.8694%" y="469" width="0.4150%" height="15" fill="rgb(217,207,13)"/><text x="7.1194%" y="479.50"></text></g><g><title>core::ptr::read (120 samples, 0.26%)</title><rect x="7.2865%" y="469" width="0.2621%" height="15" fill="rgb(231,73,38)"/><text x="7.5365%" y="479.50"></text></g><g><title>[[stack]] (2,545 samples, 5.56%)</title><rect x="2.3611%" y="485" width="5.5588%" height="15" fill="rgb(225,20,46)"/><text x="2.6111%" y="495.50">[[stack..</text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (133 samples, 0.29%)</title><rect x="8.3546%" y="469" width="0.2905%" height="15" fill="rgb(210,31,41)"/><text x="8.6046%" y="479.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (87 samples, 0.19%)</title><rect x="8.6451%" y="469" width="0.1900%" height="15" fill="rgb(221,200,47)"/><text x="8.8951%" y="479.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (70 samples, 0.15%)</title><rect x="9.1628%" y="469" width="0.1529%" height="15" fill="rgb(226,26,5)"/><text x="9.4128%" y="479.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (73 samples, 0.16%)</title><rect x="9.3878%" y="469" width="0.1594%" height="15" fill="rgb(249,33,26)"/><text x="9.6378%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::right_edge (53 samples, 0.12%)</title><rect x="10.0103%" y="469" width="0.1158%" height="15" fill="rgb(235,183,28)"/><text x="10.2603%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::forget_node_type (77 samples, 0.17%)</title><rect x="10.1588%" y="469" width="0.1682%" height="15" fill="rgb(221,5,38)"/><text x="10.4088%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (64 samples, 0.14%)</title><rect x="10.3270%" y="469" width="0.1398%" height="15" fill="rgb(247,18,42)"/><text x="10.5770%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv_mut (54 samples, 0.12%)</title><rect x="10.5629%" y="469" width="0.1179%" height="15" fill="rgb(241,131,45)"/><text x="10.8129%" y="479.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (53 samples, 0.12%)</title><rect x="10.6808%" y="469" width="0.1158%" height="15" fill="rgb(249,31,29)"/><text x="10.9308%" y="479.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_val_slice (76 samples, 0.17%)</title><rect x="11.1133%" y="469" width="0.1660%" height="15" fill="rgb(225,111,53)"/><text x="11.3633%" y="479.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::into_slices_mut (48 samples, 0.10%)</title><rect x="11.2793%" y="469" width="0.1048%" height="15" fill="rgb(238,160,17)"/><text x="11.5293%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (51 samples, 0.11%)</title><rect x="11.9520%" y="469" width="0.1114%" height="15" fill="rgb(214,148,48)"/><text x="12.2020%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (53 samples, 0.12%)</title><rect x="12.2993%" y="469" width="0.1158%" height="15" fill="rgb(232,36,49)"/><text x="12.5493%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (68 samples, 0.15%)</title><rect x="12.4151%" y="469" width="0.1485%" height="15" fill="rgb(209,103,24)"/><text x="12.6651%" y="479.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (155 samples, 0.34%)</title><rect x="12.7165%" y="469" width="0.3386%" height="15" fill="rgb(229,88,8)"/><text x="12.9665%" y="479.50"></text></g><g><title>core::ptr::read (50 samples, 0.11%)</title><rect x="13.1097%" y="469" width="0.1092%" height="15" fill="rgb(213,181,19)"/><text x="13.3597%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (60 samples, 0.13%)</title><rect x="13.2582%" y="469" width="0.1311%" height="15" fill="rgb(254,191,54)"/><text x="13.5082%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (114 samples, 0.25%)</title><rect x="13.4111%" y="469" width="0.2490%" height="15" fill="rgb(241,83,37)"/><text x="13.6611%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (56 samples, 0.12%)</title><rect x="13.6601%" y="469" width="0.1223%" height="15" fill="rgb(233,36,39)"/><text x="13.9101%" y="479.50"></text></g><g><title>[unknown] (2,918 samples, 6.37%)</title><rect x="7.9287%" y="485" width="6.3735%" height="15" fill="rgb(226,3,54)"/><text x="8.1787%" y="495.50">[unknown]</text></g><g><title>&lt;core::iter::adapters::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (148 samples, 0.32%)</title><rect x="14.5578%" y="309" width="0.3233%" height="15" fill="rgb(245,192,40)"/><text x="14.8078%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (131 samples, 0.29%)</title><rect x="14.5949%" y="293" width="0.2861%" height="15" fill="rgb(238,167,29)"/><text x="14.8449%" y="303.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (106 samples, 0.23%)</title><rect x="14.6495%" y="277" width="0.2315%" height="15" fill="rgb(232,182,51)"/><text x="14.8995%" y="287.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::post_inc_start (49 samples, 0.11%)</title><rect x="14.7740%" y="261" width="0.1070%" height="15" fill="rgb(231,60,39)"/><text x="15.0240%" y="271.50"></text></g><g><title>&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 0.16%)</title><rect x="14.8811%" y="309" width="0.1638%" height="15" fill="rgb(208,69,12)"/><text x="15.1311%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (55 samples, 0.12%)</title><rect x="15.0711%" y="261" width="0.1201%" height="15" fill="rgb(235,93,37)"/><text x="15.3211%" y="271.50"></text></g><g><title>&lt;lobster::orderbook::OrderBook as core::default::Default&gt;::default (106 samples, 0.23%)</title><rect x="15.0449%" y="309" width="0.2315%" height="15" fill="rgb(213,116,39)"/><text x="15.2949%" y="319.50"></text></g><g><title>lobster::orderbook::OrderBook::new (106 samples, 0.23%)</title><rect x="15.0449%" y="293" width="0.2315%" height="15" fill="rgb(222,207,29)"/><text x="15.2949%" y="303.50"></text></g><g><title>lobster::arena::OrderArena::new (106 samples, 0.23%)</title><rect x="15.0449%" y="277" width="0.2315%" height="15" fill="rgb(206,96,30)"/><text x="15.2949%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (54 samples, 0.12%)</title><rect x="15.3834%" y="229" width="0.1179%" height="15" fill="rgb(218,138,4)"/><text x="15.6334%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (57 samples, 0.12%)</title><rect x="15.3791%" y="245" width="0.1245%" height="15" fill="rgb(250,191,14)"/><text x="15.6291%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (160 samples, 0.35%)</title><rect x="15.2764%" y="309" width="0.3495%" height="15" fill="rgb(239,60,40)"/><text x="15.5264%" y="319.50"></text></g><g><title>core::ptr::drop_in_place (145 samples, 0.32%)</title><rect x="15.3092%" y="293" width="0.3167%" height="15" fill="rgb(206,27,48)"/><text x="15.5592%" y="303.50"></text></g><g><title>core::ptr::drop_in_place (120 samples, 0.26%)</title><rect x="15.3638%" y="277" width="0.2621%" height="15" fill="rgb(225,35,8)"/><text x="15.6138%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (120 samples, 0.26%)</title><rect x="15.3638%" y="261" width="0.2621%" height="15" fill="rgb(250,213,24)"/><text x="15.6138%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (56 samples, 0.12%)</title><rect x="15.5036%" y="245" width="0.1223%" height="15" fill="rgb(247,123,22)"/><text x="15.7536%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (50 samples, 0.11%)</title><rect x="15.9055%" y="293" width="0.1092%" height="15" fill="rgb(231,138,38)"/><text x="16.1555%" y="303.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 0.12%)</title><rect x="16.2025%" y="261" width="0.1245%" height="15" fill="rgb(231,145,46)"/><text x="16.4525%" y="271.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (124 samples, 0.27%)</title><rect x="16.0933%" y="277" width="0.2708%" height="15" fill="rgb(251,118,11)"/><text x="16.3433%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv_mut (55 samples, 0.12%)</title><rect x="16.4100%" y="261" width="0.1201%" height="15" fill="rgb(217,147,25)"/><text x="16.6600%" y="271.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (99 samples, 0.22%)</title><rect x="17.0019%" y="197" width="0.2162%" height="15" fill="rgb(247,81,37)"/><text x="17.2519%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (199 samples, 0.43%)</title><rect x="16.8228%" y="213" width="0.4347%" height="15" fill="rgb(209,12,38)"/><text x="17.0728%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (56 samples, 0.12%)</title><rect x="17.3492%" y="213" width="0.1223%" height="15" fill="rgb(227,1,9)"/><text x="17.5992%" y="223.50"></text></g><g><title>alloc::collections::btree::search::search_tree (455 samples, 0.99%)</title><rect x="16.5411%" y="261" width="0.9938%" height="15" fill="rgb(248,47,43)"/><text x="16.7911%" y="271.50"></text></g><g><title>alloc::collections::btree::search::search_node (406 samples, 0.89%)</title><rect x="16.6481%" y="245" width="0.8868%" height="15" fill="rgb(221,10,30)"/><text x="16.8981%" y="255.50"></text></g><g><title>alloc::collections::btree::search::search_linear (382 samples, 0.83%)</title><rect x="16.7005%" y="229" width="0.8344%" height="15" fill="rgb(210,229,1)"/><text x="16.9505%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::get_mut (538 samples, 1.18%)</title><rect x="16.3642%" y="277" width="1.1751%" height="15" fill="rgb(222,148,37)"/><text x="16.6142%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (93 samples, 0.20%)</title><rect x="17.7970%" y="149" width="0.2031%" height="15" fill="rgb(234,67,33)"/><text x="18.0470%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (67 samples, 0.15%)</title><rect x="18.3409%" y="133" width="0.1463%" height="15" fill="rgb(247,98,35)"/><text x="18.5909%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (384 samples, 0.84%)</title><rect x="17.7468%" y="197" width="0.8387%" height="15" fill="rgb(247,138,52)"/><text x="17.9968%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (383 samples, 0.84%)</title><rect x="17.7489%" y="181" width="0.8366%" height="15" fill="rgb(213,79,30)"/><text x="17.9989%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (374 samples, 0.82%)</title><rect x="17.7686%" y="165" width="0.8169%" height="15" fill="rgb(246,177,23)"/><text x="18.0186%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (268 samples, 0.59%)</title><rect x="18.0001%" y="149" width="0.5854%" height="15" fill="rgb(230,62,27)"/><text x="18.2501%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (69 samples, 0.15%)</title><rect x="18.5855%" y="197" width="0.1507%" height="15" fill="rgb(216,154,8)"/><text x="18.8355%" y="207.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (51 samples, 0.11%)</title><rect x="18.6248%" y="181" width="0.1114%" height="15" fill="rgb(244,35,45)"/><text x="18.8748%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (154 samples, 0.34%)</title><rect x="18.8389%" y="101" width="0.3364%" height="15" fill="rgb(251,115,12)"/><text x="19.0889%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (54 samples, 0.12%)</title><rect x="19.2408%" y="101" width="0.1179%" height="15" fill="rgb(240,54,50)"/><text x="19.4908%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (281 samples, 0.61%)</title><rect x="18.7471%" y="149" width="0.6138%" height="15" fill="rgb(233,84,52)"/><text x="18.9971%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (279 samples, 0.61%)</title><rect x="18.7515%" y="133" width="0.6094%" height="15" fill="rgb(207,117,47)"/><text x="19.0015%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (278 samples, 0.61%)</title><rect x="18.7537%" y="117" width="0.6072%" height="15" fill="rgb(249,43,39)"/><text x="19.0037%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (754 samples, 1.65%)</title><rect x="17.7206%" y="213" width="1.6469%" height="15" fill="rgb(209,38,44)"/><text x="17.9706%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (289 samples, 0.63%)</title><rect x="18.7362%" y="197" width="0.6312%" height="15" fill="rgb(236,212,23)"/><text x="18.9862%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u128&gt;::hash (288 samples, 0.63%)</title><rect x="18.7384%" y="181" width="0.6291%" height="15" fill="rgb(242,79,21)"/><text x="18.9884%" y="191.50"></text></g><g><title>core::hash::Hasher::write_u128 (285 samples, 0.62%)</title><rect x="18.7449%" y="165" width="0.6225%" height="15" fill="rgb(211,96,35)"/><text x="18.9949%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::erase_no_drop (120 samples, 0.26%)</title><rect x="19.3937%" y="213" width="0.2621%" height="15" fill="rgb(253,215,40)"/><text x="19.6437%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (72 samples, 0.16%)</title><rect x="19.4985%" y="197" width="0.1573%" height="15" fill="rgb(211,81,21)"/><text x="19.7485%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (70 samples, 0.15%)</title><rect x="19.5029%" y="181" width="0.1529%" height="15" fill="rgb(208,190,38)"/><text x="19.7529%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (176 samples, 0.38%)</title><rect x="20.1494%" y="197" width="0.3844%" height="15" fill="rgb(235,213,38)"/><text x="20.3994%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (84 samples, 0.18%)</title><rect x="20.3503%" y="181" width="0.1835%" height="15" fill="rgb(237,122,38)"/><text x="20.6003%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (73 samples, 0.16%)</title><rect x="20.3744%" y="165" width="0.1594%" height="15" fill="rgb(244,218,35)"/><text x="20.6244%" y="175.50"></text></g><g><title>lobster::arena::OrderArena::delete (1,530 samples, 3.34%)</title><rect x="17.5851%" y="277" width="3.3419%" height="15" fill="rgb(240,68,47)"/><text x="17.8351%" y="287.50">lob..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1,503 samples, 3.28%)</title><rect x="17.6441%" y="261" width="3.2829%" height="15" fill="rgb(210,16,53)"/><text x="17.8941%" y="271.50">std..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (1,499 samples, 3.27%)</title><rect x="17.6528%" y="245" width="3.2741%" height="15" fill="rgb(235,124,12)"/><text x="17.9028%" y="255.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove_entry (1,484 samples, 3.24%)</title><rect x="17.6856%" y="229" width="3.2414%" height="15" fill="rgb(224,169,11)"/><text x="17.9356%" y="239.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (582 samples, 1.27%)</title><rect x="19.6558%" y="213" width="1.2712%" height="15" fill="rgb(250,166,2)"/><text x="19.9058%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (180 samples, 0.39%)</title><rect x="20.5338%" y="197" width="0.3932%" height="15" fill="rgb(242,216,29)"/><text x="20.7838%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (175 samples, 0.38%)</title><rect x="20.5447%" y="181" width="0.3822%" height="15" fill="rgb(230,116,27)"/><text x="20.7947%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (78 samples, 0.17%)</title><rect x="20.7566%" y="165" width="0.1704%" height="15" fill="rgb(228,99,48)"/><text x="21.0066%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (69 samples, 0.15%)</title><rect x="20.7763%" y="149" width="0.1507%" height="15" fill="rgb(253,11,6)"/><text x="21.0263%" y="159.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (51 samples, 0.11%)</title><rect x="20.9357%" y="261" width="0.1114%" height="15" fill="rgb(247,143,39)"/><text x="21.1857%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (76 samples, 0.17%)</title><rect x="21.1738%" y="149" width="0.1660%" height="15" fill="rgb(236,97,10)"/><text x="21.4238%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (55 samples, 0.12%)</title><rect x="21.6259%" y="133" width="0.1201%" height="15" fill="rgb(233,208,19)"/><text x="21.8759%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (306 samples, 0.67%)</title><rect x="21.1367%" y="197" width="0.6684%" height="15" fill="rgb(216,164,2)"/><text x="21.3867%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (303 samples, 0.66%)</title><rect x="21.1432%" y="181" width="0.6618%" height="15" fill="rgb(220,129,5)"/><text x="21.3932%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (300 samples, 0.66%)</title><rect x="21.1498%" y="165" width="0.6553%" height="15" fill="rgb(242,17,10)"/><text x="21.3998%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (213 samples, 0.47%)</title><rect x="21.3398%" y="149" width="0.4652%" height="15" fill="rgb(242,107,0)"/><text x="21.5898%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (83 samples, 0.18%)</title><rect x="21.8050%" y="197" width="0.1813%" height="15" fill="rgb(251,28,31)"/><text x="22.0550%" y="207.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (51 samples, 0.11%)</title><rect x="21.8749%" y="181" width="0.1114%" height="15" fill="rgb(233,223,10)"/><text x="22.1249%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (156 samples, 0.34%)</title><rect x="22.0955%" y="117" width="0.3407%" height="15" fill="rgb(215,21,27)"/><text x="22.3455%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (287 samples, 0.63%)</title><rect x="21.9994%" y="165" width="0.6269%" height="15" fill="rgb(232,23,21)"/><text x="22.2494%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (285 samples, 0.62%)</title><rect x="22.0038%" y="149" width="0.6225%" height="15" fill="rgb(244,5,23)"/><text x="22.2538%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (283 samples, 0.62%)</title><rect x="22.0082%" y="133" width="0.6181%" height="15" fill="rgb(226,81,46)"/><text x="22.2582%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (695 samples, 1.52%)</title><rect x="21.1192%" y="213" width="1.5180%" height="15" fill="rgb(247,70,30)"/><text x="21.3692%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u128&gt;::hash (298 samples, 0.65%)</title><rect x="21.9863%" y="197" width="0.6509%" height="15" fill="rgb(212,68,19)"/><text x="22.2363%" y="207.50"></text></g><g><title>core::hash::Hasher::write_u128 (293 samples, 0.64%)</title><rect x="21.9972%" y="181" width="0.6400%" height="15" fill="rgb(240,187,13)"/><text x="22.2472%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (58 samples, 0.13%)</title><rect x="23.1134%" y="197" width="0.1267%" height="15" fill="rgb(223,113,26)"/><text x="23.3634%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (49 samples, 0.11%)</title><rect x="23.1330%" y="181" width="0.1070%" height="15" fill="rgb(206,192,2)"/><text x="23.3830%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (199 samples, 0.43%)</title><rect x="23.2401%" y="197" width="0.4347%" height="15" fill="rgb(241,108,4)"/><text x="23.4901%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (91 samples, 0.20%)</title><rect x="23.4760%" y="181" width="0.1988%" height="15" fill="rgb(247,173,49)"/><text x="23.7260%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (80 samples, 0.17%)</title><rect x="23.5000%" y="165" width="0.1747%" height="15" fill="rgb(224,114,35)"/><text x="23.7500%" y="175.50"></text></g><g><title>lobster::arena::OrderArena::get (1,423 samples, 3.11%)</title><rect x="20.9270%" y="277" width="3.1081%" height="15" fill="rgb(245,159,27)"/><text x="21.1770%" y="287.50">lob..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,368 samples, 2.99%)</title><rect x="21.0471%" y="261" width="2.9880%" height="15" fill="rgb(245,172,44)"/><text x="21.2971%" y="271.50">std..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (1,367 samples, 2.99%)</title><rect x="21.0493%" y="245" width="2.9858%" height="15" fill="rgb(236,23,11)"/><text x="21.2993%" y="255.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (1,357 samples, 2.96%)</title><rect x="21.0711%" y="229" width="2.9640%" height="15" fill="rgb(205,117,38)"/><text x="21.3211%" y="239.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (640 samples, 1.40%)</title><rect x="22.6372%" y="213" width="1.3979%" height="15" fill="rgb(237,72,25)"/><text x="22.8872%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (165 samples, 0.36%)</title><rect x="23.6747%" y="197" width="0.3604%" height="15" fill="rgb(244,70,9)"/><text x="23.9247%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (160 samples, 0.35%)</title><rect x="23.6856%" y="181" width="0.3495%" height="15" fill="rgb(217,125,39)"/><text x="23.9356%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (55 samples, 0.12%)</title><rect x="23.9150%" y="165" width="0.1201%" height="15" fill="rgb(235,36,10)"/><text x="24.1650%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (51 samples, 0.11%)</title><rect x="23.9237%" y="149" width="0.1114%" height="15" fill="rgb(251,123,47)"/><text x="24.1737%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (57 samples, 0.12%)</title><rect x="24.5877%" y="117" width="0.1245%" height="15" fill="rgb(221,13,13)"/><text x="24.8377%" y="127.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::left_kv (74 samples, 0.16%)</title><rect x="24.8651%" y="101" width="0.1616%" height="15" fill="rgb(238,131,9)"/><text x="25.1151%" y="111.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::forget_node_type (54 samples, 0.12%)</title><rect x="25.0377%" y="101" width="0.1179%" height="15" fill="rgb(211,50,8)"/><text x="25.2877%" y="111.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_kv (224 samples, 0.49%)</title><rect x="24.7122%" y="117" width="0.4893%" height="15" fill="rgb(245,182,24)"/><text x="24.9622%" y="127.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_back_leaf_edge (245 samples, 0.54%)</title><rect x="25.2015%" y="117" width="0.5351%" height="15" fill="rgb(242,14,37)"/><text x="25.4515%" y="127.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (117 samples, 0.26%)</title><rect x="25.4811%" y="101" width="0.2556%" height="15" fill="rgb(246,228,12)"/><text x="25.7311%" y="111.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_key_slice (94 samples, 0.21%)</title><rect x="25.9376%" y="85" width="0.2053%" height="15" fill="rgb(213,55,15)"/><text x="26.1876%" y="95.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (49 samples, 0.11%)</title><rect x="26.2412%" y="69" width="0.1070%" height="15" fill="rgb(209,9,3)"/><text x="26.4912%" y="79.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_val_slice (124 samples, 0.27%)</title><rect x="26.1429%" y="85" width="0.2708%" height="15" fill="rgb(230,59,30)"/><text x="26.3929%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (52 samples, 0.11%)</title><rect x="26.4946%" y="69" width="0.1136%" height="15" fill="rgb(209,121,21)"/><text x="26.7446%" y="79.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_slices (367 samples, 0.80%)</title><rect x="25.8393%" y="101" width="0.8016%" height="15" fill="rgb(220,109,13)"/><text x="26.0893%" y="111.50"></text></g><g><title>core::ptr::read (104 samples, 0.23%)</title><rect x="26.4137%" y="85" width="0.2272%" height="15" fill="rgb(232,18,1)"/><text x="26.6637%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (50 samples, 0.11%)</title><rect x="26.7916%" y="69" width="0.1092%" height="15" fill="rgb(215,41,42)"/><text x="27.0416%" y="79.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (543 samples, 1.19%)</title><rect x="25.7366%" y="117" width="1.1860%" height="15" fill="rgb(224,123,36)"/><text x="25.9866%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (129 samples, 0.28%)</title><rect x="26.6409%" y="101" width="0.2818%" height="15" fill="rgb(240,125,3)"/><text x="26.8909%" y="111.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (91 samples, 0.20%)</title><rect x="26.7239%" y="85" width="0.1988%" height="15" fill="rgb(205,98,50)"/><text x="26.9739%" y="95.50"></text></g><g><title>alloc::collections::btree::unwrap_unchecked (68 samples, 0.15%)</title><rect x="26.9227%" y="117" width="0.1485%" height="15" fill="rgb(205,185,37)"/><text x="27.1727%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (56 samples, 0.12%)</title><rect x="26.9489%" y="101" width="0.1223%" height="15" fill="rgb(238,207,15)"/><text x="27.1989%" y="111.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked::{{closure}} (1,236 samples, 2.70%)</title><rect x="24.4654%" y="133" width="2.6997%" height="15" fill="rgb(213,199,42)"/><text x="24.7154%" y="143.50">al..</text></g><g><title>core::ptr::read (86 samples, 0.19%)</title><rect x="27.1651%" y="133" width="0.1878%" height="15" fill="rgb(235,201,11)"/><text x="27.4151%" y="143.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked (1,457 samples, 3.18%)</title><rect x="24.1946%" y="165" width="3.1824%" height="15" fill="rgb(207,46,11)"/><text x="24.4446%" y="175.50">all..</text></g><g><title>alloc::collections::btree::navigate::replace (1,455 samples, 3.18%)</title><rect x="24.1989%" y="149" width="3.1780%" height="15" fill="rgb(241,35,35)"/><text x="24.4489%" y="159.50">all..</text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1,513 samples, 3.30%)</title><rect x="24.1378%" y="197" width="3.3047%" height="15" fill="rgb(243,32,47)"/><text x="24.3878%" y="207.50">&lt;al..</text></g><g><title>alloc::collections::btree::map::Range&lt;K,V&gt;::next_back_unchecked (1,494 samples, 3.26%)</title><rect x="24.1793%" y="181" width="3.2632%" height="15" fill="rgb(247,202,23)"/><text x="24.4293%" y="191.50">all..</text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,667 samples, 3.64%)</title><rect x="24.0395%" y="261" width="3.6411%" height="15" fill="rgb(219,102,11)"/><text x="24.2895%" y="271.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::find (1,664 samples, 3.63%)</title><rect x="24.0460%" y="245" width="3.6345%" height="15" fill="rgb(243,110,44)"/><text x="24.2960%" y="255.50">&lt;cor..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfind (1,663 samples, 3.63%)</title><rect x="24.0482%" y="229" width="3.6324%" height="15" fill="rgb(222,74,54)"/><text x="24.2982%" y="239.50">core..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (1,656 samples, 3.62%)</title><rect x="24.0635%" y="213" width="3.6171%" height="15" fill="rgb(216,99,12)"/><text x="24.3135%" y="223.50">core..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfind::check::{{closure}} (101 samples, 0.22%)</title><rect x="27.4600%" y="197" width="0.2206%" height="15" fill="rgb(226,22,26)"/><text x="27.7100%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (68 samples, 0.15%)</title><rect x="27.5321%" y="181" width="0.1485%" height="15" fill="rgb(217,163,10)"/><text x="27.7821%" y="191.50"></text></g><g><title>lobster::orderbook::OrderBook::update_max_bid::{{closure}} (49 samples, 0.11%)</title><rect x="27.5736%" y="165" width="0.1070%" height="15" fill="rgb(213,25,53)"/><text x="27.8236%" y="175.50"></text></g><g><title>alloc::collections::btree::map::full_range_search (93 samples, 0.20%)</title><rect x="27.7090%" y="245" width="0.2031%" height="15" fill="rgb(252,105,26)"/><text x="27.9590%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (113 samples, 0.25%)</title><rect x="27.6806%" y="261" width="0.2468%" height="15" fill="rgb(220,39,43)"/><text x="27.9306%" y="271.50"></text></g><g><title>lobster::orderbook::OrderBook::update_max_bid (1,802 samples, 3.94%)</title><rect x="24.0351%" y="277" width="3.9360%" height="15" fill="rgb(229,68,48)"/><text x="24.2851%" y="287.50">lobs..</text></g><g><title>__memmove_avx_unaligned_erms (110 samples, 0.24%)</title><rect x="28.9190%" y="133" width="0.2403%" height="15" fill="rgb(252,8,32)"/><text x="29.1690%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (235 samples, 0.51%)</title><rect x="29.3515%" y="117" width="0.5133%" height="15" fill="rgb(223,20,43)"/><text x="29.6015%" y="127.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (122 samples, 0.27%)</title><rect x="29.5983%" y="101" width="0.2665%" height="15" fill="rgb(229,81,49)"/><text x="29.8483%" y="111.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (48 samples, 0.10%)</title><rect x="29.7600%" y="85" width="0.1048%" height="15" fill="rgb(236,28,36)"/><text x="30.0100%" y="95.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::forget_node_type (92 samples, 0.20%)</title><rect x="29.8801%" y="117" width="0.2009%" height="15" fill="rgb(249,185,26)"/><text x="30.1301%" y="127.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (466 samples, 1.02%)</title><rect x="29.1593%" y="133" width="1.0178%" height="15" fill="rgb(249,174,33)"/><text x="29.4093%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::right_edge (84 samples, 0.18%)</title><rect x="30.3541%" y="117" width="0.1835%" height="15" fill="rgb(233,201,37)"/><text x="30.6041%" y="127.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::new_edge (60 samples, 0.13%)</title><rect x="30.4065%" y="101" width="0.1311%" height="15" fill="rgb(221,78,26)"/><text x="30.6565%" y="111.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (398 samples, 0.87%)</title><rect x="30.1771%" y="133" width="0.8693%" height="15" fill="rgb(250,127,30)"/><text x="30.4271%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (191 samples, 0.42%)</title><rect x="30.6293%" y="117" width="0.4172%" height="15" fill="rgb(230,49,44)"/><text x="30.8793%" y="127.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (79 samples, 0.17%)</title><rect x="30.8739%" y="101" width="0.1726%" height="15" fill="rgb(229,67,23)"/><text x="31.1239%" y="111.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_key_slice (181 samples, 0.40%)</title><rect x="31.3610%" y="101" width="0.3953%" height="15" fill="rgb(249,83,47)"/><text x="31.6110%" y="111.50"></text></g><g><title>core::slice::from_raw_parts (66 samples, 0.14%)</title><rect x="31.6122%" y="85" width="0.1442%" height="15" fill="rgb(215,43,3)"/><text x="31.8622%" y="95.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (60 samples, 0.13%)</title><rect x="31.9791%" y="85" width="0.1311%" height="15" fill="rgb(238,154,13)"/><text x="32.2291%" y="95.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_val_slice (197 samples, 0.43%)</title><rect x="31.7563%" y="101" width="0.4303%" height="15" fill="rgb(219,56,2)"/><text x="32.0063%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (68 samples, 0.15%)</title><rect x="32.2827%" y="85" width="0.1485%" height="15" fill="rgb(233,0,4)"/><text x="32.5327%" y="95.50"></text></g><g><title>__memmove_avx_unaligned_erms (49 samples, 0.11%)</title><rect x="32.3242%" y="69" width="0.1070%" height="15" fill="rgb(235,30,7)"/><text x="32.5742%" y="79.50"></text></g><g><title>core::ptr::read (151 samples, 0.33%)</title><rect x="32.1866%" y="101" width="0.3298%" height="15" fill="rgb(250,79,13)"/><text x="32.4366%" y="111.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_slices (586 samples, 1.28%)</title><rect x="31.2387%" y="117" width="1.2800%" height="15" fill="rgb(211,146,34)"/><text x="31.4887%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (83 samples, 0.18%)</title><rect x="32.7611%" y="85" width="0.1813%" height="15" fill="rgb(228,22,38)"/><text x="33.0111%" y="95.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (882 samples, 1.93%)</title><rect x="31.0465%" y="133" width="1.9265%" height="15" fill="rgb(235,168,5)"/><text x="31.2965%" y="143.50">a..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (208 samples, 0.45%)</title><rect x="32.5186%" y="117" width="0.4543%" height="15" fill="rgb(221,155,16)"/><text x="32.7686%" y="127.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (152 samples, 0.33%)</title><rect x="32.6409%" y="101" width="0.3320%" height="15" fill="rgb(215,215,53)"/><text x="32.8909%" y="111.50"></text></g><g><title>alloc::collections::btree::unwrap_unchecked (70 samples, 0.15%)</title><rect x="32.9729%" y="133" width="0.1529%" height="15" fill="rgb(223,4,10)"/><text x="33.2229%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (59 samples, 0.13%)</title><rect x="32.9970%" y="117" width="0.1289%" height="15" fill="rgb(234,103,6)"/><text x="33.2470%" y="127.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (2,087 samples, 4.56%)</title><rect x="28.7050%" y="149" width="4.5585%" height="15" fill="rgb(227,97,0)"/><text x="28.9550%" y="159.50">alloc..</text></g><g><title>core::result::Result&lt;T,E&gt;::ok (63 samples, 0.14%)</title><rect x="33.1258%" y="133" width="0.1376%" height="15" fill="rgb(234,150,53)"/><text x="33.3758%" y="143.50"></text></g><g><title>core::ptr::read (125 samples, 0.27%)</title><rect x="33.2634%" y="149" width="0.2730%" height="15" fill="rgb(228,201,54)"/><text x="33.5134%" y="159.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (2,466 samples, 5.39%)</title><rect x="28.1961%" y="181" width="5.3863%" height="15" fill="rgb(222,22,37)"/><text x="28.4461%" y="191.50">alloc::..</text></g><g><title>alloc::collections::btree::navigate::replace (2,458 samples, 5.37%)</title><rect x="28.2135%" y="165" width="5.3688%" height="15" fill="rgb(237,53,32)"/><text x="28.4635%" y="175.50">alloc::..</text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,555 samples, 5.58%)</title><rect x="28.1065%" y="213" width="5.5807%" height="15" fill="rgb(233,25,53)"/><text x="28.3565%" y="223.50">&lt;alloc:..</text></g><g><title>alloc::collections::btree::map::Range&lt;K,V&gt;::next_unchecked (2,519 samples, 5.50%)</title><rect x="28.1851%" y="197" width="5.5020%" height="15" fill="rgb(210,40,34)"/><text x="28.4351%" y="207.50">alloc::..</text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,783 samples, 6.08%)</title><rect x="27.9754%" y="261" width="6.0787%" height="15" fill="rgb(241,220,44)"/><text x="28.2254%" y="271.50">&lt;core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::find (2,783 samples, 6.08%)</title><rect x="27.9754%" y="245" width="6.0787%" height="15" fill="rgb(235,28,35)"/><text x="28.2254%" y="255.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,778 samples, 6.07%)</title><rect x="27.9864%" y="229" width="6.0678%" height="15" fill="rgb(210,56,17)"/><text x="28.2364%" y="239.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (154 samples, 0.34%)</title><rect x="33.7178%" y="213" width="0.3364%" height="15" fill="rgb(224,130,29)"/><text x="33.9678%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (105 samples, 0.23%)</title><rect x="33.8248%" y="197" width="0.2293%" height="15" fill="rgb(235,212,8)"/><text x="34.0748%" y="207.50"></text></g><g><title>lobster::orderbook::OrderBook::update_min_ask::{{closure}} (73 samples, 0.16%)</title><rect x="33.8947%" y="181" width="0.1594%" height="15" fill="rgb(223,33,50)"/><text x="34.1447%" y="191.50"></text></g><g><title>alloc::collections::btree::map::full_range_search (81 samples, 0.18%)</title><rect x="34.0891%" y="245" width="0.1769%" height="15" fill="rgb(219,149,13)"/><text x="34.3391%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (103 samples, 0.22%)</title><rect x="34.0541%" y="261" width="0.2250%" height="15" fill="rgb(250,156,29)"/><text x="34.3041%" y="271.50"></text></g><g><title>lobster::orderbook::OrderBook::cancel (8,372 samples, 18.29%)</title><rect x="16.0147%" y="293" width="18.2863%" height="15" fill="rgb(216,193,19)"/><text x="16.2647%" y="303.50">lobster::orderbook::OrderBoo..</text></g><g><title>lobster::orderbook::OrderBook::update_min_ask (2,898 samples, 6.33%)</title><rect x="27.9711%" y="277" width="6.3299%" height="15" fill="rgb(216,135,14)"/><text x="28.2211%" y="287.50">lobster:..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try::Try&gt;::into_result (51 samples, 0.11%)</title><rect x="35.3756%" y="197" width="0.1114%" height="15" fill="rgb(241,47,5)"/><text x="35.6256%" y="207.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (186 samples, 0.41%)</title><rect x="35.4870%" y="197" width="0.4063%" height="15" fill="rgb(233,42,35)"/><text x="35.7370%" y="207.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::post_inc_start (69 samples, 0.15%)</title><rect x="35.7425%" y="181" width="0.1507%" height="15" fill="rgb(231,13,6)"/><text x="35.9925%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (353 samples, 0.77%)</title><rect x="35.1965%" y="213" width="0.7710%" height="15" fill="rgb(207,181,40)"/><text x="35.4465%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::keys (66 samples, 0.14%)</title><rect x="35.9675%" y="213" width="0.1442%" height="15" fill="rgb(254,173,49)"/><text x="36.2175%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_key_slice (56 samples, 0.12%)</title><rect x="35.9893%" y="197" width="0.1223%" height="15" fill="rgb(221,1,38)"/><text x="36.2393%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (73 samples, 0.16%)</title><rect x="36.1532%" y="213" width="0.1594%" height="15" fill="rgb(206,124,46)"/><text x="36.4032%" y="223.50"></text></g><g><title>alloc::collections::btree::search::search_tree (783 samples, 1.71%)</title><rect x="34.6766%" y="261" width="1.7102%" height="15" fill="rgb(249,21,11)"/><text x="34.9266%" y="271.50"></text></g><g><title>alloc::collections::btree::search::search_node (705 samples, 1.54%)</title><rect x="34.8470%" y="245" width="1.5399%" height="15" fill="rgb(222,201,40)"/><text x="35.0970%" y="255.50"></text></g><g><title>alloc::collections::btree::search::search_linear (666 samples, 1.45%)</title><rect x="34.9322%" y="229" width="1.4547%" height="15" fill="rgb(235,61,29)"/><text x="35.1822%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (840 samples, 1.83%)</title><rect x="34.5718%" y="277" width="1.8347%" height="15" fill="rgb(219,207,3)"/><text x="34.8218%" y="287.50">a..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::into_slices_mut (60 samples, 0.13%)</title><rect x="36.4830%" y="229" width="0.1311%" height="15" fill="rgb(222,56,46)"/><text x="36.7330%" y="239.50"></text></g><g><title>alloc::collections::btree::map::OccupiedEntry&lt;K,V&gt;::into_mut (114 samples, 0.25%)</title><rect x="36.4371%" y="261" width="0.2490%" height="15" fill="rgb(239,76,54)"/><text x="36.6871%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv_mut (108 samples, 0.24%)</title><rect x="36.4502%" y="245" width="0.2359%" height="15" fill="rgb(231,124,27)"/><text x="36.7002%" y="255.50"></text></g><g><title>alloc::collections::btree::map::Entry&lt;K,V&gt;::or_insert_with (145 samples, 0.32%)</title><rect x="36.4065%" y="277" width="0.3167%" height="15" fill="rgb(249,195,6)"/><text x="36.6565%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (55 samples, 0.12%)</title><rect x="36.7342%" y="277" width="0.1201%" height="15" fill="rgb(237,174,47)"/><text x="36.9842%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::pop (53 samples, 0.12%)</title><rect x="36.9810%" y="261" width="0.1158%" height="15" fill="rgb(206,201,31)"/><text x="37.2310%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (53 samples, 0.12%)</title><rect x="37.1841%" y="165" width="0.1158%" height="15" fill="rgb(231,57,52)"/><text x="37.4341%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (189 samples, 0.41%)</title><rect x="37.1535%" y="213" width="0.4128%" height="15" fill="rgb(248,177,22)"/><text x="37.4035%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (187 samples, 0.41%)</title><rect x="37.1579%" y="197" width="0.4084%" height="15" fill="rgb(215,211,37)"/><text x="37.4079%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (182 samples, 0.40%)</title><rect x="37.1688%" y="181" width="0.3975%" height="15" fill="rgb(241,128,51)"/><text x="37.4188%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (122 samples, 0.27%)</title><rect x="37.2999%" y="165" width="0.2665%" height="15" fill="rgb(227,165,31)"/><text x="37.5499%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (55 samples, 0.12%)</title><rect x="37.5663%" y="213" width="0.1201%" height="15" fill="rgb(228,167,24)"/><text x="37.8163%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (88 samples, 0.19%)</title><rect x="37.7455%" y="133" width="0.1922%" height="15" fill="rgb(228,143,12)"/><text x="37.9955%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (153 samples, 0.33%)</title><rect x="37.6930%" y="181" width="0.3342%" height="15" fill="rgb(249,149,8)"/><text x="37.9430%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (153 samples, 0.33%)</title><rect x="37.6930%" y="165" width="0.3342%" height="15" fill="rgb(243,35,44)"/><text x="37.9430%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (153 samples, 0.33%)</title><rect x="37.6930%" y="149" width="0.3342%" height="15" fill="rgb(246,89,9)"/><text x="37.9430%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (411 samples, 0.90%)</title><rect x="37.1317%" y="229" width="0.8977%" height="15" fill="rgb(233,213,13)"/><text x="37.3817%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u128&gt;::hash (157 samples, 0.34%)</title><rect x="37.6865%" y="213" width="0.3429%" height="15" fill="rgb(233,141,41)"/><text x="37.9365%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u128 (157 samples, 0.34%)</title><rect x="37.6865%" y="197" width="0.3429%" height="15" fill="rgb(239,167,4)"/><text x="37.9365%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (125 samples, 0.27%)</title><rect x="38.3243%" y="213" width="0.2730%" height="15" fill="rgb(209,217,16)"/><text x="38.5743%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (53 samples, 0.12%)</title><rect x="38.4815%" y="197" width="0.1158%" height="15" fill="rgb(219,88,35)"/><text x="38.7315%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (363 samples, 0.79%)</title><rect x="38.0294%" y="229" width="0.7929%" height="15" fill="rgb(220,193,23)"/><text x="38.2794%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (103 samples, 0.22%)</title><rect x="38.5973%" y="213" width="0.2250%" height="15" fill="rgb(230,90,52)"/><text x="38.8473%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (101 samples, 0.22%)</title><rect x="38.6017%" y="197" width="0.2206%" height="15" fill="rgb(252,106,19)"/><text x="38.8517%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (50 samples, 0.11%)</title><rect x="38.7131%" y="181" width="0.1092%" height="15" fill="rgb(206,74,20)"/><text x="38.9631%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (143 samples, 0.31%)</title><rect x="38.9227%" y="213" width="0.3123%" height="15" fill="rgb(230,138,44)"/><text x="39.1727%" y="223.50"></text></g><g><title>lobster::arena::OrderArena::insert (1,155 samples, 2.52%)</title><rect x="36.8543%" y="277" width="2.5228%" height="15" fill="rgb(235,182,43)"/><text x="37.1043%" y="287.50">lo..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1,044 samples, 2.28%)</title><rect x="37.0967%" y="261" width="2.2803%" height="15" fill="rgb(242,16,51)"/><text x="37.3467%" y="271.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1,043 samples, 2.28%)</title><rect x="37.0989%" y="245" width="2.2781%" height="15" fill="rgb(248,9,4)"/><text x="37.3489%" y="255.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (254 samples, 0.55%)</title><rect x="38.8223%" y="229" width="0.5548%" height="15" fill="rgb(210,31,22)"/><text x="39.0723%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (315 samples, 0.69%)</title><rect x="42.5485%" y="181" width="0.6880%" height="15" fill="rgb(239,54,39)"/><text x="42.7985%" y="191.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::new_kv (49 samples, 0.11%)</title><rect x="44.4292%" y="149" width="0.1070%" height="15" fill="rgb(230,99,41)"/><text x="44.6792%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (581 samples, 1.27%)</title><rect x="43.8722%" y="165" width="1.2690%" height="15" fill="rgb(253,106,12)"/><text x="44.1222%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (277 samples, 0.61%)</title><rect x="44.5362%" y="149" width="0.6050%" height="15" fill="rgb(213,46,41)"/><text x="44.7862%" y="159.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (100 samples, 0.22%)</title><rect x="44.9228%" y="133" width="0.2184%" height="15" fill="rgb(215,133,35)"/><text x="45.1728%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::new_edge (90 samples, 0.20%)</title><rect x="45.4011%" y="149" width="0.1966%" height="15" fill="rgb(213,28,5)"/><text x="45.6511%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::forget_node_type (220 samples, 0.48%)</title><rect x="45.1871%" y="165" width="0.4805%" height="15" fill="rgb(215,77,49)"/><text x="45.4371%" y="175.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (1,209 samples, 2.64%)</title><rect x="43.2366%" y="181" width="2.6407%" height="15" fill="rgb(248,100,22)"/><text x="43.4866%" y="191.50">al..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (96 samples, 0.21%)</title><rect x="45.6676%" y="165" width="0.2097%" height="15" fill="rgb(208,67,9)"/><text x="45.9176%" y="175.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (68 samples, 0.15%)</title><rect x="46.3644%" y="165" width="0.1485%" height="15" fill="rgb(219,133,21)"/><text x="46.6144%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::right_edge (190 samples, 0.42%)</title><rect x="46.5129%" y="165" width="0.4150%" height="15" fill="rgb(246,46,29)"/><text x="46.7629%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::new_edge (119 samples, 0.26%)</title><rect x="46.6680%" y="149" width="0.2599%" height="15" fill="rgb(246,185,52)"/><text x="46.9180%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (88 samples, 0.19%)</title><rect x="46.9279%" y="165" width="0.1922%" height="15" fill="rgb(252,136,11)"/><text x="47.1779%" y="175.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (1,114 samples, 2.43%)</title><rect x="45.8773%" y="181" width="2.4332%" height="15" fill="rgb(219,138,53)"/><text x="46.1273%" y="191.50">al..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (545 samples, 1.19%)</title><rect x="47.1201%" y="165" width="1.1904%" height="15" fill="rgb(211,51,23)"/><text x="47.3701%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (215 samples, 0.47%)</title><rect x="47.8409%" y="149" width="0.4696%" height="15" fill="rgb(247,221,28)"/><text x="48.0909%" y="159.50"></text></g><g><title>alloc::collections::btree::unwrap_unchecked (266 samples, 0.58%)</title><rect x="48.3105%" y="181" width="0.5810%" height="15" fill="rgb(251,222,45)"/><text x="48.5605%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (241 samples, 0.53%)</title><rect x="48.3651%" y="165" width="0.5264%" height="15" fill="rgb(217,162,53)"/><text x="48.6151%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (223 samples, 0.49%)</title><rect x="49.0990%" y="165" width="0.4871%" height="15" fill="rgb(229,93,14)"/><text x="49.3490%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (198 samples, 0.43%)</title><rect x="49.1536%" y="149" width="0.4325%" height="15" fill="rgb(209,67,49)"/><text x="49.4036%" y="159.50"></text></g><g><title>core::ptr::read (426 samples, 0.93%)</title><rect x="48.8915%" y="181" width="0.9305%" height="15" fill="rgb(213,87,29)"/><text x="49.1415%" y="191.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (108 samples, 0.24%)</title><rect x="49.5861%" y="165" width="0.2359%" height="15" fill="rgb(205,151,52)"/><text x="49.8361%" y="175.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (59 samples, 0.13%)</title><rect x="49.6931%" y="149" width="0.1289%" height="15" fill="rgb(253,215,39)"/><text x="49.9431%" y="159.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (3,724 samples, 8.13%)</title><rect x="42.0615%" y="197" width="8.1340%" height="15" fill="rgb(221,220,41)"/><text x="42.3115%" y="207.50">alloc::coll..</text></g><g><title>core::result::Result&lt;T,E&gt;::ok (171 samples, 0.37%)</title><rect x="49.8220%" y="181" width="0.3735%" height="15" fill="rgb(218,133,21)"/><text x="50.0720%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (215 samples, 0.47%)</title><rect x="50.4205%" y="181" width="0.4696%" height="15" fill="rgb(221,193,43)"/><text x="50.6705%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (152 samples, 0.33%)</title><rect x="50.5581%" y="165" width="0.3320%" height="15" fill="rgb(240,128,52)"/><text x="50.8081%" y="175.50"></text></g><g><title>core::ptr::read (415 samples, 0.91%)</title><rect x="50.1955%" y="197" width="0.9064%" height="15" fill="rgb(253,114,12)"/><text x="50.4455%" y="207.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (97 samples, 0.21%)</title><rect x="50.8901%" y="181" width="0.2119%" height="15" fill="rgb(215,223,47)"/><text x="51.1401%" y="191.50"></text></g><g><title>alloc::collections::btree::navigate::replace (4,881 samples, 10.66%)</title><rect x="40.5893%" y="213" width="10.6612%" height="15" fill="rgb(248,225,23)"/><text x="40.8393%" y="223.50">alloc::collectio..</text></g><g><title>core::ptr::write (68 samples, 0.15%)</title><rect x="51.1019%" y="197" width="0.1485%" height="15" fill="rgb(250,108,0)"/><text x="51.3519%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (176 samples, 0.38%)</title><rect x="52.4802%" y="181" width="0.3844%" height="15" fill="rgb(228,208,7)"/><text x="52.7302%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (80 samples, 0.17%)</title><rect x="52.6899%" y="165" width="0.1747%" height="15" fill="rgb(244,45,10)"/><text x="52.9399%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::into_slices_mut (904 samples, 1.97%)</title><rect x="51.7834%" y="197" width="1.9745%" height="15" fill="rgb(207,125,25)"/><text x="52.0334%" y="207.50">a..</text></g><g><title>core::slice::from_raw_parts_mut (371 samples, 0.81%)</title><rect x="52.9476%" y="181" width="0.8103%" height="15" fill="rgb(210,195,18)"/><text x="53.1976%" y="191.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (236 samples, 0.52%)</title><rect x="53.2425%" y="165" width="0.5155%" height="15" fill="rgb(249,80,12)"/><text x="53.4925%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (216 samples, 0.47%)</title><rect x="54.5989%" y="165" width="0.4718%" height="15" fill="rgb(221,65,9)"/><text x="54.8489%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (116 samples, 0.25%)</title><rect x="54.8173%" y="149" width="0.2534%" height="15" fill="rgb(235,49,36)"/><text x="55.0673%" y="159.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (6,751 samples, 14.75%)</title><rect x="40.4058%" y="229" width="14.7456%" height="15" fill="rgb(225,32,20)"/><text x="40.6558%" y="239.50">alloc::collections::bt..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv_mut (1,786 samples, 3.90%)</title><rect x="51.2505%" y="213" width="3.9010%" height="15" fill="rgb(215,141,46)"/><text x="51.5005%" y="223.50">allo..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (638 samples, 1.39%)</title><rect x="53.7579%" y="197" width="1.3935%" height="15" fill="rgb(250,160,47)"/><text x="54.0079%" y="207.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (440 samples, 0.96%)</title><rect x="54.1904%" y="181" width="0.9611%" height="15" fill="rgb(216,222,40)"/><text x="54.4404%" y="191.50"></text></g><g><title>alloc::collections::btree::unwrap_unchecked (97 samples, 0.21%)</title><rect x="55.1515%" y="229" width="0.2119%" height="15" fill="rgb(234,217,39)"/><text x="55.4015%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (95 samples, 0.21%)</title><rect x="55.1558%" y="213" width="0.2075%" height="15" fill="rgb(207,178,40)"/><text x="55.4058%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,152 samples, 15.62%)</title><rect x="39.8729%" y="261" width="15.6215%" height="15" fill="rgb(221,136,13)"/><text x="40.1229%" y="271.50">&lt;alloc::collections::btr..</text></g><g><title>alloc::collections::btree::map::RangeMut&lt;K,V&gt;::next_unchecked (6,967 samples, 15.22%)</title><rect x="40.2770%" y="245" width="15.2174%" height="15" fill="rgb(249,199,10)"/><text x="40.5270%" y="255.50">alloc::collections::btr..</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (60 samples, 0.13%)</title><rect x="55.3633%" y="229" width="0.1311%" height="15" fill="rgb(249,222,13)"/><text x="55.6133%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (66 samples, 0.14%)</title><rect x="55.7041%" y="229" width="0.1442%" height="15" fill="rgb(244,185,38)"/><text x="55.9541%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (74 samples, 0.16%)</title><rect x="55.8482%" y="229" width="0.1616%" height="15" fill="rgb(236,202,9)"/><text x="56.0982%" y="239.50"></text></g><g><title>alloc::collections::btree::map::full_range_search (239 samples, 0.52%)</title><rect x="55.5992%" y="245" width="0.5220%" height="15" fill="rgb(250,229,37)"/><text x="55.8492%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter_mut (283 samples, 0.62%)</title><rect x="55.5228%" y="261" width="0.6181%" height="15" fill="rgb(206,174,23)"/><text x="55.7728%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::is_empty (52 samples, 0.11%)</title><rect x="56.1409%" y="261" width="0.1136%" height="15" fill="rgb(211,33,43)"/><text x="56.3909%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.14%)</title><rect x="56.4314%" y="245" width="0.1354%" height="15" fill="rgb(245,58,50)"/><text x="56.6814%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (73 samples, 0.16%)</title><rect x="56.8224%" y="165" width="0.1594%" height="15" fill="rgb(244,68,36)"/><text x="57.0724%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array (69 samples, 0.15%)</title><rect x="56.9818%" y="165" width="0.1507%" height="15" fill="rgb(232,229,15)"/><text x="57.2318%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (210 samples, 0.46%)</title><rect x="56.7394%" y="181" width="0.4587%" height="15" fill="rgb(254,30,23)"/><text x="56.9894%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (226 samples, 0.49%)</title><rect x="56.7263%" y="229" width="0.4936%" height="15" fill="rgb(235,160,14)"/><text x="56.9763%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (226 samples, 0.49%)</title><rect x="56.7263%" y="213" width="0.4936%" height="15" fill="rgb(212,155,44)"/><text x="56.9763%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (223 samples, 0.49%)</title><rect x="56.7328%" y="197" width="0.4871%" height="15" fill="rgb(226,2,50)"/><text x="56.9828%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (257 samples, 0.56%)</title><rect x="56.6870%" y="245" width="0.5613%" height="15" fill="rgb(234,177,6)"/><text x="56.9370%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (47 samples, 0.10%)</title><rect x="57.2483%" y="245" width="0.1027%" height="15" fill="rgb(217,24,9)"/><text x="57.4983%" y="255.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.10%)</title><rect x="57.2483%" y="229" width="0.1027%" height="15" fill="rgb(220,13,46)"/><text x="57.4983%" y="239.50"></text></g><g><title>lobster::orderbook::OrderBook::process_queue (497 samples, 1.09%)</title><rect x="56.2938%" y="261" width="1.0856%" height="15" fill="rgb(239,221,27)"/><text x="56.5438%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (331 samples, 0.72%)</title><rect x="60.0725%" y="117" width="0.7230%" height="15" fill="rgb(222,198,25)"/><text x="60.3225%" y="127.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::new_kv (61 samples, 0.13%)</title><rect x="61.9073%" y="85" width="0.1332%" height="15" fill="rgb(211,99,13)"/><text x="62.1573%" y="95.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (576 samples, 1.26%)</title><rect x="61.3852%" y="101" width="1.2581%" height="15" fill="rgb(232,111,31)"/><text x="61.6352%" y="111.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (276 samples, 0.60%)</title><rect x="62.0405%" y="85" width="0.6028%" height="15" fill="rgb(245,82,37)"/><text x="62.2905%" y="95.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (99 samples, 0.22%)</title><rect x="62.4271%" y="69" width="0.2162%" height="15" fill="rgb(227,149,46)"/><text x="62.6771%" y="79.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::new_edge (86 samples, 0.19%)</title><rect x="62.8443%" y="85" width="0.1878%" height="15" fill="rgb(218,36,50)"/><text x="63.0943%" y="95.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::forget_node_type (196 samples, 0.43%)</title><rect x="62.6717%" y="101" width="0.4281%" height="15" fill="rgb(226,80,48)"/><text x="62.9217%" y="111.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (1,169 samples, 2.55%)</title><rect x="60.7955%" y="117" width="2.5533%" height="15" fill="rgb(238,224,15)"/><text x="61.0455%" y="127.50">al..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (114 samples, 0.25%)</title><rect x="63.0998%" y="101" width="0.2490%" height="15" fill="rgb(241,136,10)"/><text x="63.3498%" y="111.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (67 samples, 0.15%)</title><rect x="63.8643%" y="101" width="0.1463%" height="15" fill="rgb(208,32,45)"/><text x="64.1143%" y="111.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::right_edge (179 samples, 0.39%)</title><rect x="64.0107%" y="101" width="0.3910%" height="15" fill="rgb(207,135,9)"/><text x="64.2607%" y="111.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::new_edge (116 samples, 0.25%)</title><rect x="64.1483%" y="85" width="0.2534%" height="15" fill="rgb(206,86,44)"/><text x="64.3983%" y="95.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (99 samples, 0.22%)</title><rect x="64.4016%" y="101" width="0.2162%" height="15" fill="rgb(245,177,15)"/><text x="64.6516%" y="111.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (1,197 samples, 2.61%)</title><rect x="63.3488%" y="117" width="2.6145%" height="15" fill="rgb(206,64,50)"/><text x="63.5988%" y="127.50">al..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (616 samples, 1.35%)</title><rect x="64.6179%" y="101" width="1.3455%" height="15" fill="rgb(234,36,40)"/><text x="64.8679%" y="111.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (273 samples, 0.60%)</title><rect x="65.3671%" y="85" width="0.5963%" height="15" fill="rgb(213,64,8)"/><text x="65.6171%" y="95.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (69 samples, 0.15%)</title><rect x="67.4115%" y="69" width="0.1507%" height="15" fill="rgb(210,75,36)"/><text x="67.6615%" y="79.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (116 samples, 0.25%)</title><rect x="67.5622%" y="69" width="0.2534%" height="15" fill="rgb(229,88,21)"/><text x="67.8122%" y="79.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (78 samples, 0.17%)</title><rect x="67.6452%" y="53" width="0.1704%" height="15" fill="rgb(252,204,47)"/><text x="67.8952%" y="63.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (59 samples, 0.13%)</title><rect x="67.6867%" y="37" width="0.1289%" height="15" fill="rgb(208,77,27)"/><text x="67.9367%" y="47.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_key_slice (536 samples, 1.17%)</title><rect x="66.9725%" y="85" width="1.1707%" height="15" fill="rgb(221,76,26)"/><text x="67.2225%" y="95.50"></text></g><g><title>core::slice::from_raw_parts (150 samples, 0.33%)</title><rect x="67.8156%" y="69" width="0.3276%" height="15" fill="rgb(225,139,18)"/><text x="68.0656%" y="79.50"></text></g><g><title>core::ptr::slice_from_raw_parts (81 samples, 0.18%)</title><rect x="67.9663%" y="53" width="0.1769%" height="15" fill="rgb(230,137,11)"/><text x="68.2163%" y="63.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (89 samples, 0.19%)</title><rect x="68.5975%" y="69" width="0.1944%" height="15" fill="rgb(212,28,1)"/><text x="68.8475%" y="79.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (203 samples, 0.44%)</title><rect x="68.7919%" y="69" width="0.4434%" height="15" fill="rgb(248,164,17)"/><text x="69.0419%" y="79.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (84 samples, 0.18%)</title><rect x="69.0518%" y="53" width="0.1835%" height="15" fill="rgb(222,171,42)"/><text x="69.3018%" y="63.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (51 samples, 0.11%)</title><rect x="69.1239%" y="37" width="0.1114%" height="15" fill="rgb(243,84,45)"/><text x="69.3739%" y="47.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_val_slice (622 samples, 1.36%)</title><rect x="68.1432%" y="85" width="1.3586%" height="15" fill="rgb(252,49,23)"/><text x="68.3932%" y="95.50"></text></g><g><title>core::slice::from_raw_parts (122 samples, 0.27%)</title><rect x="69.2353%" y="69" width="0.2665%" height="15" fill="rgb(215,19,7)"/><text x="69.4853%" y="79.50"></text></g><g><title>core::ptr::slice_from_raw_parts (68 samples, 0.15%)</title><rect x="69.3533%" y="53" width="0.1485%" height="15" fill="rgb(238,81,41)"/><text x="69.6033%" y="63.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (213 samples, 0.47%)</title><rect x="69.8076%" y="69" width="0.4652%" height="15" fill="rgb(210,199,37)"/><text x="70.0576%" y="79.50"></text></g><g><title>__memmove_avx_unaligned_erms (152 samples, 0.33%)</title><rect x="69.9408%" y="53" width="0.3320%" height="15" fill="rgb(244,192,49)"/><text x="70.1908%" y="63.50"></text></g><g><title>core::ptr::read (451 samples, 0.99%)</title><rect x="69.5018%" y="85" width="0.9851%" height="15" fill="rgb(226,211,11)"/><text x="69.7518%" y="95.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (98 samples, 0.21%)</title><rect x="70.2728%" y="69" width="0.2141%" height="15" fill="rgb(236,162,54)"/><text x="70.5228%" y="79.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (62 samples, 0.14%)</title><rect x="70.3514%" y="53" width="0.1354%" height="15" fill="rgb(220,229,9)"/><text x="70.6014%" y="63.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_slices (1,811 samples, 3.96%)</title><rect x="66.5422%" y="101" width="3.9556%" height="15" fill="rgb(250,87,22)"/><text x="66.7922%" y="111.50">allo..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (224 samples, 0.49%)</title><rect x="71.2186%" y="69" width="0.4893%" height="15" fill="rgb(239,43,17)"/><text x="71.4686%" y="79.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (129 samples, 0.28%)</title><rect x="71.4261%" y="53" width="0.2818%" height="15" fill="rgb(231,177,25)"/><text x="71.6761%" y="63.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (2,674 samples, 5.84%)</title><rect x="65.9633%" y="117" width="5.8406%" height="15" fill="rgb(219,179,1)"/><text x="66.2133%" y="127.50">alloc::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (598 samples, 1.31%)</title><rect x="70.4978%" y="101" width="1.3062%" height="15" fill="rgb(238,219,53)"/><text x="70.7478%" y="111.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (455 samples, 0.99%)</title><rect x="70.8101%" y="85" width="0.9938%" height="15" fill="rgb(232,167,36)"/><text x="71.0601%" y="95.50"></text></g><g><title>alloc::collections::btree::unwrap_unchecked (215 samples, 0.47%)</title><rect x="71.8039%" y="117" width="0.4696%" height="15" fill="rgb(244,19,51)"/><text x="72.0539%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (190 samples, 0.42%)</title><rect x="71.8586%" y="101" width="0.4150%" height="15" fill="rgb(224,6,22)"/><text x="72.1086%" y="111.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::{{closure}} (5,985 samples, 13.07%)</title><rect x="59.5592%" y="133" width="13.0725%" height="15" fill="rgb(224,145,5)"/><text x="59.8092%" y="143.50">alloc::collections::..</text></g><g><title>core::result::Result&lt;T,E&gt;::ok (164 samples, 0.36%)</title><rect x="72.2736%" y="117" width="0.3582%" height="15" fill="rgb(234,130,49)"/><text x="72.5236%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (117 samples, 0.26%)</title><rect x="72.8502%" y="117" width="0.2556%" height="15" fill="rgb(254,6,2)"/><text x="73.1002%" y="127.50"></text></g><g><title>__memmove_avx_unaligned_erms (79 samples, 0.17%)</title><rect x="72.9332%" y="101" width="0.1726%" height="15" fill="rgb(208,96,46)"/><text x="73.1832%" y="111.50"></text></g><g><title>core::ptr::read (366 samples, 0.80%)</title><rect x="72.6318%" y="133" width="0.7994%" height="15" fill="rgb(239,3,39)"/><text x="72.8818%" y="143.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (149 samples, 0.33%)</title><rect x="73.1057%" y="117" width="0.3254%" height="15" fill="rgb(233,210,1)"/><text x="73.3557%" y="127.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::into_inner (72 samples, 0.16%)</title><rect x="73.2739%" y="101" width="0.1573%" height="15" fill="rgb(244,137,37)"/><text x="73.5239%" y="111.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (7,082 samples, 15.47%)</title><rect x="58.0652%" y="165" width="15.4686%" height="15" fill="rgb(240,136,2)"/><text x="58.3152%" y="175.50">alloc::collections::btre..</text></g><g><title>alloc::collections::btree::navigate::replace (7,066 samples, 15.43%)</title><rect x="58.1002%" y="149" width="15.4337%" height="15" fill="rgb(239,18,37)"/><text x="58.3502%" y="159.50">alloc::collections::btre..</text></g><g><title>core::ptr::write (47 samples, 0.10%)</title><rect x="73.4312%" y="133" width="0.1027%" height="15" fill="rgb(218,185,22)"/><text x="73.6812%" y="143.50"></text></g><g><title>alloc::collections::btree::unwrap_unchecked (86 samples, 0.19%)</title><rect x="73.5338%" y="165" width="0.1878%" height="15" fill="rgb(225,218,4)"/><text x="73.7838%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (86 samples, 0.19%)</title><rect x="73.5338%" y="149" width="0.1878%" height="15" fill="rgb(230,182,32)"/><text x="73.7838%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,331 samples, 16.01%)</title><rect x="57.8206%" y="197" width="16.0125%" height="15" fill="rgb(242,56,43)"/><text x="58.0706%" y="207.50">&lt;alloc::collections::btre..</text></g><g><title>alloc::collections::btree::map::Range&lt;K,V&gt;::next_unchecked (7,259 samples, 15.86%)</title><rect x="57.9779%" y="181" width="15.8552%" height="15" fill="rgb(233,99,24)"/><text x="58.2279%" y="191.50">alloc::collections::btre..</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (51 samples, 0.11%)</title><rect x="73.7217%" y="165" width="0.1114%" height="15" fill="rgb(234,209,42)"/><text x="73.9717%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,065 samples, 17.62%)</title><rect x="57.4012%" y="245" width="17.6157%" height="15" fill="rgb(227,7,12)"/><text x="57.6512%" y="255.50">&lt;core::iter::adapters::Filt..</text></g><g><title>core::iter::traits::iterator::Iterator::find (8,062 samples, 17.61%)</title><rect x="57.4078%" y="229" width="17.6092%" height="15" fill="rgb(245,203,43)"/><text x="57.6578%" y="239.50">core::iter::traits::iterato..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (8,052 samples, 17.59%)</title><rect x="57.4296%" y="213" width="17.5873%" height="15" fill="rgb(238,205,33)"/><text x="57.6796%" y="223.50">core::iter::traits::iterato..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (496 samples, 1.08%)</title><rect x="73.9336%" y="197" width="1.0834%" height="15" fill="rgb(231,56,7)"/><text x="74.1836%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (332 samples, 0.73%)</title><rect x="74.2918%" y="181" width="0.7252%" height="15" fill="rgb(244,186,29)"/><text x="74.5418%" y="191.50"></text></g><g><title>lobster::orderbook::OrderBook::update_min_ask::{{closure}} (226 samples, 0.49%)</title><rect x="74.5233%" y="165" width="0.4936%" height="15" fill="rgb(234,111,31)"/><text x="74.7733%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::is_empty (122 samples, 0.27%)</title><rect x="74.7505%" y="149" width="0.2665%" height="15" fill="rgb(241,149,10)"/><text x="75.0005%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (74 samples, 0.16%)</title><rect x="75.2637%" y="213" width="0.1616%" height="15" fill="rgb(249,206,44)"/><text x="75.5137%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (106 samples, 0.23%)</title><rect x="75.4254%" y="213" width="0.2315%" height="15" fill="rgb(251,153,30)"/><text x="75.6754%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (49 samples, 0.11%)</title><rect x="75.5499%" y="197" width="0.1070%" height="15" fill="rgb(239,152,38)"/><text x="75.7999%" y="207.50"></text></g><g><title>alloc::collections::btree::map::full_range_search (327 samples, 0.71%)</title><rect x="75.0912%" y="229" width="0.7142%" height="15" fill="rgb(249,139,47)"/><text x="75.3412%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (372 samples, 0.81%)</title><rect x="75.0169%" y="245" width="0.8125%" height="15" fill="rgb(244,64,35)"/><text x="75.2669%" y="255.50"></text></g><g><title>lobster::orderbook::OrderBook::match_with_asks (16,717 samples, 36.51%)</title><rect x="39.3771%" y="277" width="36.5136%" height="15" fill="rgb(216,46,15)"/><text x="39.6271%" y="287.50">lobster::orderbook::OrderBook::match_with_asks</text></g><g><title>lobster::orderbook::OrderBook::update_min_ask (8,475 samples, 18.51%)</title><rect x="57.3794%" y="261" width="18.5112%" height="15" fill="rgb(250,74,19)"/><text x="57.6294%" y="271.50">lobster::orderbook::OrderBook..</text></g><g><title>__memmove_avx_unaligned_erms (176 samples, 0.38%)</title><rect x="77.9809%" y="165" width="0.3844%" height="15" fill="rgb(249,42,33)"/><text x="78.2309%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::left_kv (193 samples, 0.42%)</title><rect x="78.8546%" y="149" width="0.4216%" height="15" fill="rgb(242,149,17)"/><text x="79.1046%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::new_edge (77 samples, 0.17%)</title><rect x="79.4378%" y="133" width="0.1682%" height="15" fill="rgb(244,29,21)"/><text x="79.6878%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::forget_node_type (156 samples, 0.34%)</title><rect x="79.3024%" y="149" width="0.3407%" height="15" fill="rgb(220,130,37)"/><text x="79.5524%" y="159.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_kv (637 samples, 1.39%)</title><rect x="78.3653%" y="165" width="1.3913%" height="15" fill="rgb(211,67,2)"/><text x="78.6153%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (52 samples, 0.11%)</title><rect x="79.6431%" y="149" width="0.1136%" height="15" fill="rgb(235,68,52)"/><text x="79.8931%" y="159.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::last_leaf_edge (48 samples, 0.10%)</title><rect x="80.0494%" y="149" width="0.1048%" height="15" fill="rgb(246,142,3)"/><text x="80.2994%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::left_edge (117 samples, 0.26%)</title><rect x="80.1542%" y="149" width="0.2556%" height="15" fill="rgb(241,25,7)"/><text x="80.4042%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::new_edge (97 samples, 0.21%)</title><rect x="80.1979%" y="133" width="0.2119%" height="15" fill="rgb(242,119,39)"/><text x="80.4479%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (61 samples, 0.13%)</title><rect x="80.4098%" y="149" width="0.1332%" height="15" fill="rgb(241,98,45)"/><text x="80.6598%" y="159.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_back_leaf_edge (726 samples, 1.59%)</title><rect x="79.7567%" y="165" width="1.5857%" height="15" fill="rgb(254,28,30)"/><text x="80.0067%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (366 samples, 0.80%)</title><rect x="80.5430%" y="149" width="0.7994%" height="15" fill="rgb(241,142,54)"/><text x="80.7930%" y="159.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (149 samples, 0.33%)</title><rect x="81.0170%" y="133" width="0.3254%" height="15" fill="rgb(222,85,15)"/><text x="81.2670%" y="143.50"></text></g><g><title>alloc::collections::btree::unwrap_unchecked (168 samples, 0.37%)</title><rect x="81.3424%" y="165" width="0.3669%" height="15" fill="rgb(210,85,47)"/><text x="81.5924%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (140 samples, 0.31%)</title><rect x="81.4036%" y="149" width="0.3058%" height="15" fill="rgb(224,206,25)"/><text x="81.6536%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (166 samples, 0.36%)</title><rect x="81.8513%" y="149" width="0.3626%" height="15" fill="rgb(243,201,19)"/><text x="82.1013%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (144 samples, 0.31%)</title><rect x="81.8994%" y="133" width="0.3145%" height="15" fill="rgb(236,59,4)"/><text x="82.1494%" y="143.50"></text></g><g><title>core::ptr::read (294 samples, 0.64%)</title><rect x="81.7094%" y="165" width="0.6422%" height="15" fill="rgb(254,179,45)"/><text x="81.9594%" y="175.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (63 samples, 0.14%)</title><rect x="82.2139%" y="149" width="0.1376%" height="15" fill="rgb(226,14,10)"/><text x="82.4639%" y="159.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked::{{closure}} (2,268 samples, 4.95%)</title><rect x="77.6642%" y="181" width="4.9538%" height="15" fill="rgb(244,27,41)"/><text x="77.9142%" y="191.50">alloc:..</text></g><g><title>core::result::Result&lt;T,E&gt;::ok (122 samples, 0.27%)</title><rect x="82.3515%" y="165" width="0.2665%" height="15" fill="rgb(235,35,32)"/><text x="82.6015%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (121 samples, 0.26%)</title><rect x="82.7447%" y="165" width="0.2643%" height="15" fill="rgb(218,68,31)"/><text x="82.9947%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (92 samples, 0.20%)</title><rect x="82.8080%" y="149" width="0.2009%" height="15" fill="rgb(207,120,37)"/><text x="83.0580%" y="159.50"></text></g><g><title>core::ptr::read (254 samples, 0.55%)</title><rect x="82.6180%" y="181" width="0.5548%" height="15" fill="rgb(227,98,0)"/><text x="82.8680%" y="191.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (75 samples, 0.16%)</title><rect x="83.0090%" y="165" width="0.1638%" height="15" fill="rgb(207,7,3)"/><text x="83.2590%" y="175.50"></text></g><g><title>alloc::collections::btree::navigate::replace (2,946 samples, 6.43%)</title><rect x="76.8320%" y="197" width="6.4347%" height="15" fill="rgb(206,98,19)"/><text x="77.0820%" y="207.50">alloc::c..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (136 samples, 0.30%)</title><rect x="84.0574%" y="165" width="0.2971%" height="15" fill="rgb(217,5,26)"/><text x="84.3074%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (65 samples, 0.14%)</title><rect x="84.2125%" y="149" width="0.1420%" height="15" fill="rgb(235,190,38)"/><text x="84.4625%" y="159.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::into_slices_mut (593 samples, 1.30%)</title><rect x="83.5660%" y="181" width="1.2952%" height="15" fill="rgb(247,86,24)"/><text x="83.8160%" y="191.50"></text></g><g><title>core::slice::from_raw_parts_mut (199 samples, 0.43%)</title><rect x="84.4265%" y="165" width="0.4347%" height="15" fill="rgb(205,101,16)"/><text x="84.6765%" y="175.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (131 samples, 0.29%)</title><rect x="84.5751%" y="149" width="0.2861%" height="15" fill="rgb(246,168,33)"/><text x="84.8251%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (130 samples, 0.28%)</title><rect x="85.3308%" y="149" width="0.2839%" height="15" fill="rgb(231,114,1)"/><text x="85.5808%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (77 samples, 0.17%)</title><rect x="85.4466%" y="133" width="0.1682%" height="15" fill="rgb(207,184,53)"/><text x="85.6966%" y="143.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked (4,097 samples, 8.95%)</title><rect x="76.7272%" y="213" width="8.9487%" height="15" fill="rgb(224,95,51)"/><text x="76.9772%" y="223.50">alloc::collec..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv_mut (1,103 samples, 2.41%)</title><rect x="83.2667%" y="197" width="2.4092%" height="15" fill="rgb(212,188,45)"/><text x="83.5167%" y="207.50">al..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (373 samples, 0.81%)</title><rect x="84.8612%" y="181" width="0.8147%" height="15" fill="rgb(223,154,38)"/><text x="85.1112%" y="191.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (261 samples, 0.57%)</title><rect x="85.1058%" y="165" width="0.5701%" height="15" fill="rgb(251,22,52)"/><text x="85.3558%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,348 samples, 9.50%)</title><rect x="76.3318%" y="261" width="9.4970%" height="15" fill="rgb(229,209,22)"/><text x="76.5818%" y="271.50">&lt;core::iter::a..</text></g><g><title>&lt;alloc::collections::btree::map::IterMut&lt;K,V&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4,321 samples, 9.44%)</title><rect x="76.3908%" y="245" width="9.4380%" height="15" fill="rgb(234,138,34)"/><text x="76.6408%" y="255.50">&lt;alloc::colle..</text></g><g><title>alloc::collections::btree::map::RangeMut&lt;K,V&gt;::next_back_unchecked (4,212 samples, 9.20%)</title><rect x="76.6289%" y="229" width="9.1999%" height="15" fill="rgb(212,95,11)"/><text x="76.8789%" y="239.50">alloc::collec..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (49 samples, 0.11%)</title><rect x="86.0450%" y="229" width="0.1070%" height="15" fill="rgb(240,179,47)"/><text x="86.2950%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (68 samples, 0.15%)</title><rect x="86.1521%" y="229" width="0.1485%" height="15" fill="rgb(240,163,11)"/><text x="86.4021%" y="239.50"></text></g><g><title>alloc::collections::btree::map::full_range_search (238 samples, 0.52%)</title><rect x="85.9205%" y="245" width="0.5198%" height="15" fill="rgb(236,37,12)"/><text x="86.1705%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter_mut (289 samples, 0.63%)</title><rect x="85.8485%" y="261" width="0.6312%" height="15" fill="rgb(232,164,16)"/><text x="86.0985%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::is_empty (57 samples, 0.12%)</title><rect x="86.4797%" y="261" width="0.1245%" height="15" fill="rgb(244,205,15)"/><text x="86.7297%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.14%)</title><rect x="86.8466%" y="245" width="0.1420%" height="15" fill="rgb(223,117,47)"/><text x="87.0966%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (84 samples, 0.18%)</title><rect x="87.3119%" y="165" width="0.1835%" height="15" fill="rgb(244,107,35)"/><text x="87.5619%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array (104 samples, 0.23%)</title><rect x="87.4954%" y="165" width="0.2272%" height="15" fill="rgb(205,140,8)"/><text x="87.7454%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::repeat (46 samples, 0.10%)</title><rect x="87.6220%" y="149" width="0.1005%" height="15" fill="rgb(228,84,46)"/><text x="87.8720%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (284 samples, 0.62%)</title><rect x="87.2005%" y="181" width="0.6203%" height="15" fill="rgb(254,188,9)"/><text x="87.4505%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (295 samples, 0.64%)</title><rect x="87.1983%" y="229" width="0.6443%" height="15" fill="rgb(206,112,54)"/><text x="87.4483%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (295 samples, 0.64%)</title><rect x="87.1983%" y="213" width="0.6443%" height="15" fill="rgb(216,84,49)"/><text x="87.4483%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (294 samples, 0.64%)</title><rect x="87.2005%" y="197" width="0.6422%" height="15" fill="rgb(214,194,35)"/><text x="87.4505%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (327 samples, 0.71%)</title><rect x="87.1655%" y="245" width="0.7142%" height="15" fill="rgb(249,28,3)"/><text x="87.4155%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (62 samples, 0.14%)</title><rect x="87.8863%" y="245" width="0.1354%" height="15" fill="rgb(222,56,52)"/><text x="88.1363%" y="255.50"></text></g><g><title>&lt;alloc::vec::Drain&lt;T&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.14%)</title><rect x="87.8863%" y="229" width="0.1354%" height="15" fill="rgb(245,217,50)"/><text x="88.1363%" y="239.50"></text></g><g><title>lobster::orderbook::OrderBook::process_queue (619 samples, 1.35%)</title><rect x="86.7069%" y="261" width="1.3520%" height="15" fill="rgb(213,201,24)"/><text x="86.9569%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (155 samples, 0.34%)</title><rect x="89.7320%" y="101" width="0.3386%" height="15" fill="rgb(248,116,28)"/><text x="89.9820%" y="111.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::left_kv (213 samples, 0.47%)</title><rect x="90.5161%" y="85" width="0.4652%" height="15" fill="rgb(219,72,43)"/><text x="90.7661%" y="95.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::new_edge (78 samples, 0.17%)</title><rect x="91.0971%" y="69" width="0.1704%" height="15" fill="rgb(209,138,14)"/><text x="91.3471%" y="79.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::forget_node_type (144 samples, 0.31%)</title><rect x="91.0119%" y="85" width="0.3145%" height="15" fill="rgb(222,18,33)"/><text x="91.2619%" y="95.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_kv (633 samples, 1.38%)</title><rect x="90.0706%" y="101" width="1.3826%" height="15" fill="rgb(213,199,7)"/><text x="90.3206%" y="111.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (58 samples, 0.13%)</title><rect x="91.3265%" y="85" width="0.1267%" height="15" fill="rgb(250,110,10)"/><text x="91.5765%" y="95.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::last_leaf_edge (49 samples, 0.11%)</title><rect x="91.7437%" y="85" width="0.1070%" height="15" fill="rgb(248,123,6)"/><text x="91.9937%" y="95.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::left_edge (121 samples, 0.26%)</title><rect x="91.8507%" y="85" width="0.2643%" height="15" fill="rgb(206,91,31)"/><text x="92.1007%" y="95.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::new_edge (76 samples, 0.17%)</title><rect x="91.9490%" y="69" width="0.1660%" height="15" fill="rgb(211,154,13)"/><text x="92.1990%" y="79.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (58 samples, 0.13%)</title><rect x="92.1150%" y="85" width="0.1267%" height="15" fill="rgb(225,148,7)"/><text x="92.3650%" y="95.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_back_leaf_edge (714 samples, 1.56%)</title><rect x="91.4532%" y="101" width="1.5595%" height="15" fill="rgb(220,160,43)"/><text x="91.7032%" y="111.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (353 samples, 0.77%)</title><rect x="92.2417%" y="85" width="0.7710%" height="15" fill="rgb(213,52,39)"/><text x="92.4917%" y="95.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (140 samples, 0.31%)</title><rect x="92.7069%" y="69" width="0.3058%" height="15" fill="rgb(243,137,7)"/><text x="92.9569%" y="79.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (89 samples, 0.19%)</title><rect x="93.9694%" y="53" width="0.1944%" height="15" fill="rgb(230,79,13)"/><text x="94.2194%" y="63.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (48 samples, 0.10%)</title><rect x="94.0589%" y="37" width="0.1048%" height="15" fill="rgb(247,105,23)"/><text x="94.3089%" y="47.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_key_slice (347 samples, 0.76%)</title><rect x="93.6352%" y="69" width="0.7579%" height="15" fill="rgb(223,179,41)"/><text x="93.8852%" y="79.50"></text></g><g><title>core::slice::from_raw_parts (105 samples, 0.23%)</title><rect x="94.1638%" y="53" width="0.2293%" height="15" fill="rgb(218,9,34)"/><text x="94.4138%" y="63.50"></text></g><g><title>core::ptr::slice_from_raw_parts (59 samples, 0.13%)</title><rect x="94.2642%" y="37" width="0.1289%" height="15" fill="rgb(222,106,8)"/><text x="94.5142%" y="47.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (64 samples, 0.14%)</title><rect x="94.6640%" y="53" width="0.1398%" height="15" fill="rgb(211,220,0)"/><text x="94.9140%" y="63.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (130 samples, 0.28%)</title><rect x="94.8037%" y="53" width="0.2839%" height="15" fill="rgb(229,52,16)"/><text x="95.0537%" y="63.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (51 samples, 0.11%)</title><rect x="94.9763%" y="37" width="0.1114%" height="15" fill="rgb(212,155,18)"/><text x="95.2263%" y="47.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_val_slice (397 samples, 0.87%)</title><rect x="94.3931%" y="69" width="0.8671%" height="15" fill="rgb(242,21,14)"/><text x="94.6431%" y="79.50"></text></g><g><title>core::slice::from_raw_parts (79 samples, 0.17%)</title><rect x="95.0877%" y="53" width="0.1726%" height="15" fill="rgb(222,19,48)"/><text x="95.3377%" y="63.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (122 samples, 0.27%)</title><rect x="95.4372%" y="53" width="0.2665%" height="15" fill="rgb(232,45,27)"/><text x="95.6872%" y="63.50"></text></g><g><title>__memmove_avx_unaligned_erms (73 samples, 0.16%)</title><rect x="95.5442%" y="37" width="0.1594%" height="15" fill="rgb(249,103,42)"/><text x="95.7942%" y="47.50"></text></g><g><title>core::ptr::read (273 samples, 0.60%)</title><rect x="95.2602%" y="69" width="0.5963%" height="15" fill="rgb(246,81,33)"/><text x="95.5102%" y="79.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (70 samples, 0.15%)</title><rect x="95.7036%" y="53" width="0.1529%" height="15" fill="rgb(252,33,42)"/><text x="95.9536%" y="63.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::into_slices (1,139 samples, 2.49%)</title><rect x="93.3731%" y="85" width="2.4878%" height="15" fill="rgb(209,212,41)"/><text x="93.6231%" y="95.50">al..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (133 samples, 0.29%)</title><rect x="96.2934%" y="53" width="0.2905%" height="15" fill="rgb(207,154,6)"/><text x="96.5434%" y="63.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (83 samples, 0.18%)</title><rect x="96.4026%" y="37" width="0.1813%" height="15" fill="rgb(223,64,47)"/><text x="96.6526%" y="47.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (1,656 samples, 3.62%)</title><rect x="93.0127%" y="101" width="3.6171%" height="15" fill="rgb(211,161,38)"/><text x="93.2627%" y="111.50">allo..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (352 samples, 0.77%)</title><rect x="95.8609%" y="85" width="0.7688%" height="15" fill="rgb(219,138,40)"/><text x="96.1109%" y="95.50"></text></g><g><title>&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (264 samples, 0.58%)</title><rect x="96.0531%" y="69" width="0.5766%" height="15" fill="rgb(241,228,46)"/><text x="96.3031%" y="79.50"></text></g><g><title>alloc::collections::btree::unwrap_unchecked (174 samples, 0.38%)</title><rect x="96.6298%" y="101" width="0.3801%" height="15" fill="rgb(223,209,38)"/><text x="96.8798%" y="111.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (150 samples, 0.33%)</title><rect x="96.6822%" y="85" width="0.3276%" height="15" fill="rgb(236,164,45)"/><text x="96.9322%" y="95.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked::{{closure}} (3,595 samples, 7.85%)</title><rect x="89.3803%" y="117" width="7.8523%" height="15" fill="rgb(231,15,5)"/><text x="89.6303%" y="127.50">alloc::coll..</text></g><g><title>core::result::Result&lt;T,E&gt;::ok (102 samples, 0.22%)</title><rect x="97.0098%" y="101" width="0.2228%" height="15" fill="rgb(252,35,15)"/><text x="97.2598%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (75 samples, 0.16%)</title><rect x="97.4095%" y="101" width="0.1638%" height="15" fill="rgb(248,181,18)"/><text x="97.6595%" y="111.50"></text></g><g><title>__memmove_avx_unaligned_erms (56 samples, 0.12%)</title><rect x="97.4510%" y="85" width="0.1223%" height="15" fill="rgb(233,39,42)"/><text x="97.7010%" y="95.50"></text></g><g><title>core::ptr::read (231 samples, 0.50%)</title><rect x="97.2326%" y="117" width="0.5046%" height="15" fill="rgb(238,110,33)"/><text x="97.4826%" y="127.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (75 samples, 0.16%)</title><rect x="97.5733%" y="101" width="0.1638%" height="15" fill="rgb(233,195,10)"/><text x="97.8233%" y="111.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_back_unchecked (4,249 samples, 9.28%)</title><rect x="88.5219%" y="149" width="9.2807%" height="15" fill="rgb(254,105,3)"/><text x="88.7719%" y="159.50">alloc::collec..</text></g><g><title>alloc::collections::btree::navigate::replace (4,239 samples, 9.26%)</title><rect x="88.5438%" y="133" width="9.2589%" height="15" fill="rgb(221,225,9)"/><text x="88.7938%" y="143.50">alloc::collec..</text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (4,391 samples, 9.59%)</title><rect x="88.4062%" y="181" width="9.5909%" height="15" fill="rgb(224,227,45)"/><text x="88.6562%" y="191.50">&lt;alloc::collec..</text></g><g><title>alloc::collections::btree::map::Range&lt;K,V&gt;::next_back_unchecked (4,360 samples, 9.52%)</title><rect x="88.4739%" y="165" width="9.5232%" height="15" fill="rgb(229,198,43)"/><text x="88.7239%" y="175.50">alloc::collect..</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (48 samples, 0.10%)</title><rect x="97.8922%" y="149" width="0.1048%" height="15" fill="rgb(206,209,35)"/><text x="98.1422%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,868 samples, 10.63%)</title><rect x="88.0982%" y="245" width="10.6328%" height="15" fill="rgb(245,195,53)"/><text x="88.3482%" y="255.50">&lt;core::iter::ada..</text></g><g><title>&lt;core::iter::adapters::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::find (4,863 samples, 10.62%)</title><rect x="88.1091%" y="229" width="10.6218%" height="15" fill="rgb(240,92,26)"/><text x="88.3591%" y="239.50">&lt;core::iter::ada..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfind (4,862 samples, 10.62%)</title><rect x="88.1113%" y="213" width="10.6197%" height="15" fill="rgb(207,40,23)"/><text x="88.3613%" y="223.50">core::iter::tra..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (4,848 samples, 10.59%)</title><rect x="88.1419%" y="197" width="10.5891%" height="15" fill="rgb(223,111,35)"/><text x="88.3919%" y="207.50">core::iter::tra..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfind::check::{{closure}} (303 samples, 0.66%)</title><rect x="98.0692%" y="181" width="0.6618%" height="15" fill="rgb(229,147,28)"/><text x="98.3192%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (190 samples, 0.42%)</title><rect x="98.3160%" y="165" width="0.4150%" height="15" fill="rgb(211,29,28)"/><text x="98.5660%" y="175.50"></text></g><g><title>lobster::orderbook::OrderBook::update_max_bid::{{closure}} (135 samples, 0.29%)</title><rect x="98.4361%" y="149" width="0.2949%" height="15" fill="rgb(228,72,33)"/><text x="98.6861%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::is_empty (71 samples, 0.16%)</title><rect x="98.5759%" y="133" width="0.1551%" height="15" fill="rgb(205,214,31)"/><text x="98.8259%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (49 samples, 0.11%)</title><rect x="98.9254%" y="213" width="0.1070%" height="15" fill="rgb(224,111,15)"/><text x="99.1754%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,HandleType&gt;::force (75 samples, 0.16%)</title><rect x="99.0324%" y="213" width="0.1638%" height="15" fill="rgb(253,21,26)"/><text x="99.2824%" y="223.50"></text></g><g><title>alloc::collections::btree::map::full_range_search (232 samples, 0.51%)</title><rect x="98.8096%" y="229" width="0.5067%" height="15" fill="rgb(245,139,43)"/><text x="99.0596%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::iter (288 samples, 0.63%)</title><rect x="98.7310%" y="245" width="0.6291%" height="15" fill="rgb(252,170,7)"/><text x="98.9810%" y="255.50"></text></g><g><title>lobster::orderbook::OrderBook::event (38,398 samples, 83.87%)</title><rect x="15.6281%" y="309" width="83.8696%" height="15" fill="rgb(231,118,14)"/><text x="15.8781%" y="319.50">lobster::orderbook::OrderBook::event</text></g><g><title>lobster::orderbook::OrderBook::limit (29,849 samples, 65.20%)</title><rect x="34.3009%" y="293" width="65.1967%" height="15" fill="rgb(238,83,0)"/><text x="34.5509%" y="303.50">lobster::orderbook::OrderBook::limit</text></g><g><title>lobster::orderbook::OrderBook::match_with_bids (10,808 samples, 23.61%)</title><rect x="75.8906%" y="277" width="23.6070%" height="15" fill="rgb(221,39,39)"/><text x="76.1406%" y="287.50">lobster::orderbook::OrderBook::match_w..</text></g><g><title>lobster::orderbook::OrderBook::update_max_bid (5,237 samples, 11.44%)</title><rect x="88.0589%" y="261" width="11.4387%" height="15" fill="rgb(222,119,46)"/><text x="88.3089%" y="271.50">lobster::orderboo..</text></g><g><title>std::panic::catch_unwind (39,001 samples, 85.19%)</title><rect x="14.3154%" y="405" width="85.1866%" height="15" fill="rgb(222,165,49)"/><text x="14.5654%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (39,001 samples, 85.19%)</title><rect x="14.3154%" y="389" width="85.1866%" height="15" fill="rgb(219,113,52)"/><text x="14.5654%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (39,001 samples, 85.19%)</title><rect x="14.3154%" y="373" width="85.1866%" height="15" fill="rgb(214,7,15)"/><text x="14.5654%" y="383.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (39,001 samples, 85.19%)</title><rect x="14.3154%" y="357" width="85.1866%" height="15" fill="rgb(235,32,4)"/><text x="14.5654%" y="367.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::lang_start::{{closure}} (39,001 samples, 85.19%)</title><rect x="14.3154%" y="341" width="85.1866%" height="15" fill="rgb(238,90,54)"/><text x="14.5654%" y="351.50">std::rt::lang_start::{{closure}}</text></g><g><title>quantcup::main (39,001 samples, 85.19%)</title><rect x="14.3154%" y="325" width="85.1866%" height="15" fill="rgb(213,208,19)"/><text x="14.5654%" y="335.50">quantcup::main</text></g><g><title>__libc_start_main (39,002 samples, 85.19%)</title><rect x="14.3154%" y="469" width="85.1888%" height="15" fill="rgb(233,156,4)"/><text x="14.5654%" y="479.50">__libc_start_main</text></g><g><title>main (39,002 samples, 85.19%)</title><rect x="14.3154%" y="453" width="85.1888%" height="15" fill="rgb(207,194,5)"/><text x="14.5654%" y="463.50">main</text></g><g><title>std::rt::lang_start (39,002 samples, 85.19%)</title><rect x="14.3154%" y="437" width="85.1888%" height="15" fill="rgb(206,111,30)"/><text x="14.5654%" y="447.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (39,002 samples, 85.19%)</title><rect x="14.3154%" y="421" width="85.1888%" height="15" fill="rgb(243,70,54)"/><text x="14.5654%" y="431.50">std::rt::lang_start_internal</text></g><g><title>_start (39,008 samples, 85.20%)</title><rect x="14.3044%" y="485" width="85.2019%" height="15" fill="rgb(242,28,8)"/><text x="14.5544%" y="495.50">_start</text></g><g><title>all (45,783 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(219,106,18)"/><text x="0.2500%" y="527.50"></text></g><g><title>quantcup (45,783 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(244,222,10)"/><text x="0.2500%" y="511.50">quantcup</text></g></svg></svg>